This document details the requirements for the game "Kniffeliger".

- The game is based on client/server architecture.
- The server:
    - keeps track of the state of the game
      - every player has an identifier (username -> #)
      - every field on the playing card has a unique identifier
      - if dice are rolled in client, request is send to server to generate a random number for each dice
      - the server compares the numbers with the fields and determines which number can entered into which field according to the rules of the game
      - the server sends this information to the client
    - has a procedure to end the game (also prematurely), including determining the winner according to the rules of the game
    - incorporates the game logic
      - number of dice, number of dice rolls per round
      - which numbers can be entered into which fields
      - distribution of points
      - special events
    

- The client:
    - can suggest a name for a player based on the system username
    - displays the state of the game (values of fields, number of rounds, active player)
    - inititates the roll of the dice (button or animated dice)
    - handles the assignment of dice numbers to fields (e.g. pulling the dice to the field)
    - highlights the admissible fields (according to the rules of the game) upon receiving this information from the server
    - offers an option to end the game prematurely


- Examples for client-server communication
      - client sends: roll dice <number> # roll of dice number specifies which dice rolled (only important if one dice is saved)
      - server answers: <number of dice> <value> # random number for each dice in the game
      - client sends: <value> to <field> # assignment of dice value to some field <value>=0 corresponds to erasing field, <field> has format <Int row, Int column>
      - ...
      - client sends: player <number> ends turn # signals end of turn, upon which server stores values and makes the filled fields immutable 
      - server sends: active player <number> # signals that player x is now active player

- there is a broadcast to all players across all lobbies and games
 [other backend stuff, maybe?]

 - when opening the game, the player can choose to enter a lobby (if one exists already) or create a new lobby
 - all existing lobbies and ongoing games are listed, the player can not enter an ongoing game
 - with each lobby, a list with player that are in the lobby is shown
 - the player can choose a name, the name has to be unique and is automatically changed if it is not
 - up to four players can enter one lobby
 - one player can start the game if at least two players are in the lobby
 - only one player can play at the same time
 - to play, a player can roll up to five dice up to three times:
    - in the first round, the player rolls all five dice
    - the player can then choose to keep up to five of the dice and re-roll the rest
    - the process can be repeated one more time
- after at most three rolls, the player can choose a combination for which the dice are counted as points, combinations include:
    - dice with the same number, here the sum of the chosen dice is counted
    - three of a kind or four of a kind, again the sum is counted
    - full house, 25 points
    - small straight (four sequential dice), 30 points
    - large straight (five sequential dice), 40 points
    - kniffeliger (five dice with the same number), 50 points
    - chance, every combination can count, the points is the sum of the dice
- every combination can only be filled once
- if the player can not or does not want to fill a combination, they have to cross out one of the left over combinations
- if at the end the sum of the dice is a multiple of five, the player can roll one die one additional time to get:
    - steal an entry: the player can steal an entry of another player instead of rolling the dice, the other player then
    gets zero points for this combination
    - freeze a combination: the player can freeze one combination of another player, the other player can not fill this
    field in the next round
    - cross out one combination: the player can cross out one combination of another player, the other player can not fill
    this combination at any later point and is skipped the following turn
    - shift all combination sheets: the player can shift the collected points/ combination of all players in a circle by one
    - exchange two combination sheets: the player can exchange their collected points/ combinations with another player
    - [no idea?, maybe the player can choose one of the other things? or all of the above?]
- those bonuses can be collected and used whenever it is the players turn
- the game ends when all combinations are filled
- the player with the most points wins
- there is a high-score list

[how do we implement the changing of the prob.??]

The GUI offers:
- a window in which the lobby is created/chosen
- a game window
- a button which opens a game tutorial/ list of the rules
- a button to roll the dice
- five dice to show the rolled numbers
- five fields to select the dice that are not rolled the next time
- a counter that shows how many rolls are left
- up to four lists that show the combinations and acquired points for each player
- a list with the collected bonus actions for each player, the player can use an action by clicking on it
- a chat in which the player can send a message to all other players or to only one other player
- a button to leave the game
- a winning animation after the game is finished which shows the name of the winner and the amount of points
- there is a button to open the high score list [as a pop-up??]

For a mockup, see [insert here].



