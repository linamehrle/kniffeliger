plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'jacoco'
}

/**
 * set important variables/settings as sourceSet and the name of the main class.
 */
version 0.6
mainClassName = 'starter.Starter'

build {
    // generate docs
    dependsOn 'generateDocs'
}

javafx {
    version = "19.0.2.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.media', 'javafx.graphics']
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// sets options for the task javadoc
javadoc {
    options {
        // Customize the Javadoc options as needed
        author true
        version true
    }
}

// creates task create Javadoc
task generateDocs(type: Javadoc) {
    // set the source of the classes and classpath for which a documentation should be generated
    source = sourceSets.main.allJava
    classpath += project.files(sourceSets.main.compileClasspath)

    // set the destination dir for the javadoc
    destinationDir = file("./build/docs/javadoc")
}

// create task given by milestone 3
task "build-cs108"(type: GradleBuild) {
    dependsOn 'generateDocs'
    tasks = ['Jar']
}

// adds maven central as a maven repository
repositories {
    mavenCentral()
}

dependencies {
    // dependencies for implementation
    implementation 'org.openjfx:javafx-controls:19.0.2.1'
    implementation 'org.openjfx:javafx-media:19.0.2.1'
    implementation 'org.openjfx:javafx-graphics:19.0.2.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'

    // dependencies for testing
    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// The following block adds both compile and runtime dependencies to the jar
jar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}