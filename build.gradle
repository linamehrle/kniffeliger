plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}

/**
 * set important variables/settings as sourceSet and the name of the main class.
 */
version 0.2
mainClassName = 'application.Starter'

group 'application'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '18'
targetCompatibility = '18'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'application'
    mainClass = 'application.Starter'
}

javafx {
    version = '18'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation 'org.openjfx:javafx-controls:21'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter:5.+")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}


build {
    // generate docs
    dependsOn 'generateDocs'
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}

// sets options for the task javadoc
javadoc {
    options {
        // Customize the Javadoc options as needed
        author true
        version true
    }
}

// creates task createJavadox
task generateDocs(type: Javadoc) {
    // set the source of the classes and classpath for which a documentation should be generated
    source = sourceSets.main.allJava
    classpath += project.files(sourceSets.main.compileClasspath)

    // set the destination dir for the javadoc
    destinationDir = file("/build/docs/javadoc")
}


// create task given by milestone 3
task "build-cs108"(type: GradleBuild) {
    dependsOn 'generateDocs'
    tasks = ['Jar']
}


// The following block adds both compile and runtime dependencies to the jar
/*jar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}*/

